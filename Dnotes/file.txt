sudo yum install docker

sudo usermod -aG docker ec2-user


sudo service docker start

sudo reboot

docker info


docker pull postgress:9.6

docker run --name some-postgres -e POSTGRES_PASSWORD=password -d 027ccf656dc1

or 
with Port
docker run --name some-postgres -p 5432:5432 -e POSTGRES_PASSWORD=password -d 027ccf656dc1

027ccf656dc1 -- Image id or Name
POSTGRES_PASSWORD=password -- password for the post gress(password)
--name some-postgres  --- postgress is image name which we given for us (some-postgres)
-p 5432:5432
-p 6000:6379
-p 5432 ---is host port (you can change this as per req)
-p 5432:5432 --- another one is the container port

=====================
for Redis
docker run --name rediss -p 6000:6379 -d redis or redis:4.0
--name rediss  rediss is the given image name for us
redis  -- actual image name 
by this query it will directly pull the image from hub and run the container wit port 6379

6000 is the host port we can use any one (you can change this as per req)
6379 is the container port for the redis
docker run -p 6000:6379 -d -----in detached mode.
============================

[ec2-user@ip-172-31-9-6 ~]$ docker pull postgres:9.6
9.6: Pulling from library/postgres

[ec2-user@ip-172-31-9-6 ~]$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
postgres     9.6       027ccf656dc1   2 years ago   200MB


[ec2-user@ip-172-31-9-6 ~]$ docker run --name Postgrestest -p 5432:5432 -e POSTGRES_PASSWORD=password -d 027ccf656dc1

[ec2-user@ip-172-31-9-6 ~]$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                       NAMES
6867515e8193   027ccf656dc1   "docker-entrypoint.s…"   11 seconds ago   Up 11 seconds   0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   Postgrestest


ec2-user@ip-172-31-9-6 ~]$ docker stop 6867515e8193(container_id)

[ec2-user@ip-172-31-9-6 ~]$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS                     PORTS     NAMES
6867515e8193   027ccf656dc1   "docker-entrypoint.s…"   52 seconds ago   Exited (0) 5 seconds ago             Postgrestest

ec2-user@ip-172-31-9-6 ~]$ docker rm 6867515e8193

[ec2-user@ip-172-31-9-6 ~]$ docker ps -a
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES


[ec2-user@ip-172-31-9-6 ~]$ docker images
REPOSITORY   TAG       IMAGE ID       CREATED       SIZE
postgres     9.6       027ccf656dc1   2 years ago   200MB


[ec2-user@ip-172-31-9-6 ~]$ docker rmi 027ccf656dc1(image_id)
Untagged: postgres:9.6
Untagged: postgres@sha256:caddd35b05cdd56c614ab1f674e63be778e0abdf54e71a7507ff3e28d4902698
Deleted: sha256:027ccf656dc121a26b53cac03415d4326a75bf2751f177210d47793754e8b316........................


to Restart the container
1st stop the container  --docker stop container_id(6867515e8193)--ps -a and take container id
2nd start the container --docker start container_id(6867515e8193)

to get logs

docker logs Image_id

to Go inside the container to debug 
docker exec -it 6867515e8193 /bin/bash --(container_id(6867515e8193) or image name(Postgrestest)  given buy us )

env -- it show about details for postgres image
exit -- to come out from container





======================

docker pull mongo
docker pull mongo-express

port : 27017

docker network create mongodbb  --- due to this network all the applications like frontend(nginx),database(mongodb),... connected with each other.

docker run -p 27017:27017 --name mongodata -d -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=password --net mongodbb  mongo

port =  -p 27017:27017
image name = -name mongodata
user name = -e MONGO_INITDB_ROOT_USERNAME=admin
user password = -e MONGO_INITDB_ROOT_PASSWORD=password
network name = --net mongodbb(which we created)


mongo-express defalt port --8081

docker run -p 8081:8081 --name mongo-express -d -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=password --net mongodbb -e ME_CONFIG_MONGODB_SERVER=mongodata mongo-express


or we can write like below

[ec2-user@ip-172-31-9-6 ~]$ docker run -d \
> -p 8081:8081 \
> --name mongo-express \
> --net mongodbb \
> -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
> -e ME_CONFIG_MONGODB_PASSWORD=password \
> -e ME_CONFIG_MONGODB_SERVER=mongodata \
> mongo-express


port  = -p 8081:8081
admin = -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin
password = -e ME_CONFIG_MONGODB_ADMINPASSWORD=password
network name = --net mongodbb(which we created)
server = -e ME_CONFIG_MONGODB_SERVER=mongodata  --(mongodata)--container name or container_id
image name = mongo-express

CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                                           NAMES
3599a26f25f1   mongo     "docker-entrypoint.s…"   5 minutes ago   Up 5 minutes   0.0.0.0:27017->27017/tcp, :::27017->27017/tcp   mongodata








in home diri
create foulder -- mkdir Docker-ComposeFile
cd Docker-ComposeFile
touck docker-compose.yml
vi docker-compose.yml

version: '3.1'
services:

  mongodb:
    image: mongo
    port:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongodb


or



version: '3'
services:

  mongo:----------------------------(1)
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
    image: mongo-express
    container_name: mongo-express_db
    ports:
      - "8081:8081"
    environment: 
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo----------------------------(1)
    depends_on:
      - "mongo"

======
container_name: mongodb
container_name: mongo-express_db  --- we can give container name inside is better if you forgot then default foulder name and image name will be added.

or

docker-compose --project-name mongodb or mongo-express_db -f docker-compose.yml up -d   ---so that it will use this name as container name.

docker-compose -f docker-compose.yml -p mongodb stop
docker-compose -f docker-compose.yml -p mongodb start  ---better give in file.

=======

docker-compose -f docker-compose.yml up -d    or docker-compose -f docker-compose.yml down(delete all images,volumes ...completed)

docker-compose -f docker-compose.yml stop  ---it only stops the containers
docker-compose -f docker-compose.yml start ---it starts the containers with out loosing any data.---Mainly used at the time of restarts or dp updates status




docker File:

FROM node:20-alpine

RUN mkidr -p /home/app

COPY ./app /home/app

WORKDIR /home/app

RUN npm install

CMD ["node", "server.js"]

======
if need to give credientials like db ...Exampls
ENV MONGO_DB_USERNAME=admin\
    MONGO_DB_PASSWORD= password

ENTRYPOINT["docker-entry.sh"] ---just for exp 
COPY docker-entry.sh /usr/local/bin
=======

node is base image (FROM node:20-alpine)
server.js is the file to execuite 

docker build -t  Venkata/my-app:1.0 .


nodejs and mongodb

ec2-user@ip-172-31-8-204 Docker-ComposeFile]$ cat docker-compose.yml 
version: '3.1'
services:
  my-app:
    build: .
    ports: 
    -3000:3000
    environment:
      MONGO_DB_USERNAME: admin
      MONGO_DB_PWD: password

  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment: 
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - "mongo"



==================================
 my-app:
    build: .
    ports: 
    -3000:3000
    environment:
      MONGO_DB_USERNAME: admin
      MONGO_DB_PWD: password

my-app ---base on
build --. means docker file placed in the current path or diri or if docker file placed in diff location give that path
ports.....
environments ---to connect alpine console to the database we need to give database credentials.

======================================

docker-compose -f docker-compose.yml up -d

localhost:3000 then console works.



Here we are giving password in docker file its not good so better set variables like
 ME_CONFIG_MONGODB_ADMINUSERNAME: admin
 ME_CONFIG_MONGODB_ADMINPASSWORD: password

to 

ME_CONFIG_MONGODB_ADMINUSERNAME: $ {MONGODB_ADMIN_USER}
ME_CONFIG_MONGODB_ADMINPASSWORD: $ {MONGODB_ADMIN_PASS}

come out of the file and give 
export MONGODB_ADMIN_USER=admin
export MONGODB_ADMIN_PASS=password 
like this based on req you can to your every image (alpin,mongo,mongo-express...)

or


we can use secrets instead of giving variables


services:
  myapp:
    image: myapp:latest
  secrets:
    - my_secret

secrets:
  my_secret:
    file: ./my_secret.txt----it is like boot.properties


===================================================================

want to execute file with out image get directly form docker_hub and run the container
1st create the docker hub user like GitHub---create repo-->namespace=Venkata,repositoryname= my-app-->create

to build our image using docker file

docker build -t  Venkata/my-app:1.0 .

docker images

image name : Venkata/my-app
tag : 1.0
my-app:1.0 .----dot means it picks current diri docker file.
........

docker login
username:
password:....

to push to dockerhub

docker push Venkata/my-app:1.0


===================================================
with out image creating and running container from hub--( Venkata/my-app:1.0) like


ec2-user@ip-172-31-8-204 Docker-ComposeFile]$ cat docker-compose.yml 
version: '3.1'
services:
  my-app:
    image: Venkata/my-app:1.0
    ports: 
    -3000:3000
    environment:
      MONGO_DB_USERNAME: $ {MONGODB_ADMIN_USER}
      MONGO_DB_PWD: $ {MONGODB_ADMIN_PASS}

  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: $ {MONGODB_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: $ {MONGODB_ADMIN_PASS}
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment: 
      ME_CONFIG_MONGODB_ADMINUSERNAME: $ {MONGODB_ADMIN_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: $ {MONGODB_ADMIN_PASS}
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - "mongo"




=============================

Docker file


FROM node:20-alpine

RUN mkidr -p /home/app

ENV MONGO_DB_USERNAME=admin\
    MONGO_DB_PASSWORD= password

COPY ./app /home/app

CMD ["node", "/home/app/server.js"]


docker build -t my-app:1.0 .

docker run my-app:1.0 
docker logs container_id
app lisigning 3000....

docker exec -it container-id /bin/bash or /sh

# --- means in side container
ls 
env ---so that you can see athe docker file details here
exit

if you did any changes in docker file then need to recreate image like
docker images-->  docker stop con..id--->docker rmi image_id-->docker build -t my-app:1.0 . ---> docker run my-app:1.0

COPY ./app /home/app  --->after creating the image what are the file present in the . current directory file then all will copy to the /home/app


==============================================

ECR --elastic container registry  like nexis to store artifacts.


better learn nexis 




===============================================
docker volumes

ec2-user@ip-172-31-8-204 Docker-ComposeFile]$ cat docker-compose.yml 
version: '3.1'
services:
  #my-app:
    #image: Venkata/my-app:1.0
    #ports: 
    #-3000:3000
    #environment:
      #MONGO_DB_USERNAME: $ {MONGODB_ADMIN_USER} or admin
      #MONGO_DB_PWD: $ {MONGODB_ADMIN_PASS} or password 

  mongo:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: $ {MONGODB_ADMIN_USER} or admin
      MONGO_INITDB_ROOT_PASSWORD: $ {MONGODB_ADMIN_PASS} or password 
    volumes:
      - mongodata:/data/db ---for mongodb database --(mongodata -- volume name given by us) --------(2) ---same data
      - mongodata:/var/lib/postgresql/data ---for postgresql database
      - mongodata:/var/lib/mysql ---for mysql database
  mongo-express:
    image: mongo-express
    ports:
      - 8080:8081
    environment: 
      ME_CONFIG_MONGODB_ADMINUSERNAME: $ {MONGODB_ADMIN_USER} or admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: $ {MONGODB_ADMIN_PASS} or password 
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - "mongo"

  volumes:
    mongodata:
      driver:local ---means the data is storing in 2places one is with foulder and anther is with default path(mongo-express)
       (/var/lib/docker/volumes/venkata..._mongodata)--------(2) ---same data ----to close this section ctrl+a+k -->yes(y)

==============
docker-compose -f docker-composefile.yaml down

docker-compose -f docker-composefile.yaml up





 


